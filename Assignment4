-- 1. Create a view named “view_product_order_[your_last_name]”, list all products and total ordered quantity for that product


/*
Create VIEW view_product__order_[cooper] AS
select p.productID, p.ProductName, sum(o.quantity)
from products p left join [order details] o
ON p.productId = o.productID
Group by p.productID,p.ProductName
*/

-- 2 Create a stored procedure “sp_product_order_quantity_[your_last_name]” that accept product id as an input and total quantities of order as output parameter.
/*
CREATE Procedure sp_product_order_quantity_Cooper 
@id  INT
AS 
BEGIN
SELECT  sum(o.quantity) AS TOTAL_QUANTITES from products p left join [order details] o ON p.productID = o.productID where p.ProductID = @ID
END

Exec  sp_product_order_quantity_cooper 5
*/

--3 . Create a stored procedure “sp_product_order_city_[your_last_name]” that accept product name as an input and top 5 
--cities that ordered most that product combined with the total quantity of that product ordered from that city as output.
/*
EXEC sp_product_order_city_cooper 'chai'
ALTER Proc sp_product_order_city_cooper 
@name VARCHAR(30)
AS 
BEGIN
SELECT  Top 5 q.city, q.TOTAL_CITY_QUANTITIES
FROM (SELECT c.city ,sub.productID, sum(sub.quantity)AS  TOTAL_CITY_QUANTITIES, ROW_NUMBER() over (partition by c.city order by c.city) AS ROW_NUM

FROM (select p.ProductName, p.productID, od.orderID, o.customerID,od.quantity
FROM products p left join [Order Details] od
ON p.productId = od.productID JOIN orders o 
on od.orderID = o.orderID
where p.productName = @name ) sub JOIN customers c 
on 
sub.CustomerID = c.customerID 
GROUP BY c.city,sub.productID
) q
order by q.TOTAL_CITY_QUANTITIES DESC
END */ 

--4. Create 2 new tables “people_your_last_name” “city_your_last_name”. City table has two records: {Id:1, City: Seattle}, {Id:2, City: Green Bay}.
-- People has three records: {id:1, Name: Aaron Rodgers, City: 2}, {id:2, Name: Russell Wilson, City:1}, {Id: 3, Name: Jody Nelson, City:2}. 
--Remove city of Seattle. If there was anyone from Seattle, put them into a new city “Madison”. Create a view “Packers_your_name” lists all people from Green Bay.
-- If any error occurred, no changes should be made to DB. (after test) Drop both tables and view.
/*
 CREATE TABLE people_Cooper  (
     ID INT ,
     NAME VARCHAR(256) NOT NULL,
     City VARCHAR(30)
 );



 CREATE TABLE city_cooper(
     ID INT UNIQUE NOT NULL,
     CITY VARCHAR(30)

 )

 insert into people_cooper 
 VALUES (1,'Aaron Rogers',2),
 (2,'Russell Wilson',1),
 (3,'Jody Nelson',2)

 insert into city_cooper
 VALUES (1, 'Seattle'),(2,'Green Bay')

 SElect * 
 from city_cooper

insert into city_cooper
 VALUES (3, 'Madison')

 SElect * 
 from city_cooper
 
 UPDATE people_Cooper
 set City = 3
 where city =2

 select *
 FRom people_Cooper


DELETE FROM city_cooper
WHERE city = 'Seattle'

 SElect * 
 from city_cooper

 CREATE View Packers_Cooper AS 

    Select p.name 
    from people_Cooper p join city_cooper C
    on p.City = c.id
    where c.city = 'Madison'
 

select * FROM packers_cooper

DROP TABLE person_cooper
DROP TABLE city_cooper
*/
-- 5. Create a stored procedure “sp_birthday_employees_[you_last_name]” that creates a new table “birthday_employees_your_last_name” 
--and fill it with all employees that have a birthday on Feb. (Make a screen shot) drop the table.
 --Employee table should not be affected.
-- sp_birthday_employees_[you_last_name]
/*
 CREATE PROC sp_birthday_employees_Cooper 


AS
BEGIN
IF OBJECT_ID('birthday_employees_cooper', 'U') IS  NULL
                 THEN
 CREATE TABLE birthday_employees_Cooper (
    Name VARCHAR(256)
) 
INSERT INTO birthday_employees_cooper
Select FirstName + ' ' + LastName AS NAME  FROM 
EMPLOYEES
where MONTH(Birthdate) = 02
 
Select * FROM birthday_employees_Cooper

ELSE

Select * FROM birthday_employees_Cooper
END

Exec sp_birthday_employees_Cooper
*/
--6. How do you make sure two tables have the same data?

/* One way is by using the CHECKSUM TABLE and Compare the results
CHECKSUM TABLE original_table, backup_table;  */
